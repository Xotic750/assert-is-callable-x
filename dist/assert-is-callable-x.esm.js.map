{"version":3,"sources":["../src/assert-is-callable-x.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,aAAvB;AACA,OAAO,YAAP,MAAyB,+BAAzB;AACA,OAAO,WAAP,MAAwB,cAAxB;AAEA;;;;;;;;;AAQA,eAAe,SAAS,gBAAT,CAA0B,KAA1B,EAAiC;AAC9C,MAAI,UAAU,CAAC,KAAD,CAAV,KAAsB,KAA1B,EAAiC;AAC/B,QAAM,GAAG,GAAG,WAAW,CAAC,KAAD,CAAX,GAAqB,YAAY,CAAC,KAAD,CAAjC,GAA2C,WAAvD;AACA,UAAM,IAAI,SAAJ,WAAiB,GAAjB,sBAAN;AACD;;AAED,SAAO,KAAP;AACD","file":"assert-is-callable-x.esm.js","sourcesContent":["import isCallable from 'is-callable';\nimport safeToString from 'to-string-symbols-supported-x';\nimport isPrimitive from 'is-primitive';\n\n/**\n * Tests `callback` to see if it is callable, throws a `TypeError` if it is\n * not. Otherwise returns the `callback`.\n *\n * @param {*} value - The argument to be tested.\n * @throws {TypeError} Throws if `callback` is not a callable.\n * @returns {*} Returns `callback` if it is callable.\n */\nexport default function assertIsCallable(value) {\n  if (isCallable(value) === false) {\n    const msg = isPrimitive(value) ? safeToString(value) : '#<Object>';\n    throw new TypeError(`${msg} is not callable`);\n  }\n\n  return value;\n}\n"]}