{"version":3,"sources":["../src/assert-is-callable-x.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,aAAvB;AACA,OAAO,YAAP,MAAyB,+BAAzB;AACA,OAAO,WAAP,MAAwB,gBAAxB;AAEA;;;;;;;;;;AASA,IAAM,gBAAgB,GAAG,SAAS,gBAAT,CAA0B,KAA1B,EAAiC,OAAjC,EAA0C;AACjE,MAAI,UAAU,CAAC,KAAD,CAAV,KAAsB,KAA1B,EAAiC;AAC/B,QAAM,GAAG,GACP,SAAS,CAAC,MAAV,GAAmB,CAAnB,GAAuB,YAAY,CAAC,OAAD,CAAnC,aAAkD,WAAW,CAAC,KAAD,CAAX,GAAqB,YAAY,CAAC,KAAD,CAAjC,GAA2C,WAA7F,qBADF;AAGA,UAAM,IAAI,SAAJ,CAAc,GAAd,CAAN;AACD;;AAED,SAAO,KAAP;AACD,CATD;;AAWA,eAAe,gBAAf","file":"assert-is-callable-x.esm.js","sourcesContent":["import isCallable from 'is-callable';\nimport safeToString from 'to-string-symbols-supported-x';\nimport isPrimitive from 'is-primitive-x';\n\n/**\n * Tests `callback` to see if it is callable, throws a `TypeError` if it is\n * not. Otherwise returns the `callback`.\n *\n * @param {*} value - The argument to be tested.\n * @param {string} [message] - An alternative user message.\n * @throws {TypeError} Throws if `callback` is not a callable.\n * @returns {*} Returns `callback` if it is callable.\n */\nconst assertIsCallable = function assertIsCallable(value, message) {\n  if (isCallable(value) === false) {\n    const msg =\n      arguments.length > 1 ? safeToString(message) : `${isPrimitive(value) ? safeToString(value) : '#<Object>'} is not callable`;\n\n    throw new TypeError(msg);\n  }\n\n  return value;\n};\n\nexport default assertIsCallable;\n"]}